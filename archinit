#!/usr/bin/env zsh
setopt ERR_EXIT EXTENDED_GLOB

# ----------------------------------------------------------------------
# Storage initialization commmands
# Surface Pro 3 Dual Boot
# ----------------------------------------------------------------------
# curl -LO http://links.ethanschoonover.com/archinit


typeset -A CONFIG INSTALL INIT MKINITCPIO
typeset -a INSTALLERS

CONFIG=(
username    es
shell       zsh
hostname    palimpsest
timezone    America/Los_Angeles
locale      "en_US.UTF-8 UTF-8"
keymap      us
font        Lat2-Terminus16
drive       /dev/sda
swap_part   6
crypt_part  7
boot_label  SYSTEM
dmz_label   DMZ
swap_label  swap
crypt_part_label    cryptpart
crypt_mapped_label  cryptdev
crypt_fs_label      archlinux
modules     "i915"
hooks       "base systemd sd-encrypt sd-vconsole modconf block filesystems keyboard fsck shutdown"
)
#hooks       "base systemd sd-encrypt sd-vconsole modconf block filesystem btrfs fsck shutdown"
#boot_part   2
#dmz_part    5
# (above) base hook still here for emergency shell... need to check on when that gets changed

INSTALL=(

1,utilities     "
                 btrfs-progs
                 gnupg
                 htop
                 openssh
                 powertop
                 python
                 refind-efi
                 vim
                "

2,networking    "
                 dialog
                 iw
                 wpa_supplicant
                 rfkill
                 networkmanager
                 networkmanager-openvpn
                "

3,boot          "
                 plymouth
                "

4,x             "
                 xorg
                 xf86-video-intel
                 xf86-input-wacom
                 libva-intel-driver
                 libvdpau-va-gl
                "

5,dispmgr       "
                 lightdm
                 accountsservice
                 light-locker
                 lightdm-gtk3-greeter
                "

6,freedesktop   "
                 d-feet
                 colord colord-gtk
                 desktop-file-utils
                "

7,wm            "
                 compton
                 dmenu
                 dunst
                 gnome-keyring
                 gnome-keyring-query
                 i3
                 network-manager-applet
                 polkit-gnome
                 rxvt-unicode
                 terminus-font
                 udiskie
                 unclutter
                 volnoti
                "

8,xutils        "
                 argyllcms
                 dispcalgui
                 feh
                 file-roller
                 p7zip
                 parcellite
                 unrar
                 unzip
                 xkeycaps
                 xorg-xfontsel
                 zip
                "

9,xapps         "
                 ttf-bitstream-vera
                 google-chrome-dev
                "

10,sound        "
                 alsa-utils
                 pulseaudio
                 pulseaudio-alsa
                 paprefs
                 pavucontrol
                "
)

INIT=(
sound           'amixer sset Master unmute || :'
video           'print "export LIBVA_DRIVER_NAME=vdpau\nexport VDPAU_DRIVER=va_gl" > /etc/video_accel.sh'        
)

# purely cosmetic
setfont $CONFIG[font]

:<< \
------------------------------------------------------------------------
Storage configuration
------------------------------------------------------------------------
cleanup () {
umount -R /mnt/home/dmz &>/dev/null || :
umount -R /mnt/home &>/dev/null || :
umount -R /mnt/boot &>/dev/null || :
umount -R /mnt &>/dev/null || :
cryptsetup close $CONFIG[crypt_mapped_label] &>/dev/null || :
swapoff -L $CONFIG[swap_label] &>/dev/null || : ; }
cleanup
TRAPZERR () { print "\nUNHANDLED ERROR"; exit }
[[ -n $1 ]] && exit # quick cleanup from cli... archinit cleanup

# partitioning (drive contents preserved)
# ----------------------------------------------------------------------
ram="$(( $(print ${$(cat /proc/meminfo | grep -i memtotal)[2]}) / 1000000 ))G"
while ! ${${${pass::=$(read -Ers "?Passphrase: ")}:#$(\
    read -Ers "?$(print "\nConfirmation: ")")}:+false};
do print "\nDidn't match--try again:\n"; done; print
sgdisk --new=0:0:0 /dev/sda
print -r $pass | cryptsetup luksFormat /dev/sda7
print -r $pass | cryptsetup open /dev/sda7 lvm
pvcreate /dev/mapper/lvm # physical volume
vgcreate storage /dev/mapper/lvm # volume group
lvcreate -L 8G storage  -n swapvol # logical volume
lvcreate -l 100%FREE storage -n sysvol # logical volume
mkfs.btrfs --label system /dev/mapper/storage-sysvol # make filesystem
mkswap -L swap /dev/mapper/storage-swap # make swap device
swapon -L swap -d # activate swap device
# OR swapon -d /dev/storage/swapvol # activate swap device
mount -t btrfs /dev/storage/sysvol /mnt # temp mount for subvol creation
btrfs subvolume create /mnt/root
btrfs subvolume set-default ${$(btrfs subvolume list /mnt/root)[(w)2]} /mnt/root
btrfs subvolume create /mnt/home
umount -R /mnt
o_btrfs=defaults,x-mount.mkdir,compress=lzo,space_cache,autodefrag,inode_cache
o_fat=defaults,x-mount.mkdir
o_ntfs=defaults,x-mount.mkdir
mount -t btrfs -o subvol=root,$o_btrfs /dev/storage/sysvol /mnt
mount -t btrfs -o subvol=home,$o_btrfs /dev/storage/sysvol /mnt/home
mount -o $o_fat -L SYSTEM /mnt/boot
mount -o $o_ntfs -L DMZ /mnt/home/dmz

CONFIG[crypt_uuid]="$(lsblk -no UUID /dev/sda7)"
CONFIG[lvm_uuid]="$(lsblk -no UUID /dev/mapper/lvm)"
CONFIG[swap_uuid]="$(lsblk -no UUID /dev/sda$CONFIG[swap_part])" # get swap uuid if no label


# Mount filesystems and subvolumes
# ----------------------------------------------------------------------

:<< \
------------------------------------------------------------------------
Clean up old initramfs files
------------------------------------------------------------------------
#rm -f /mnt/boot/*(#q.)
rm -f /mnt/boot/{initramfs-linux-fallback.img,initramfs-linux.img,vmlinuz-linux}

:<< \
------------------------------------------------------------------------
Install base system
------------------------------------------------------------------------
pacstrap /mnt base
pacstrap /mnt base-devel
pacstrap /mnt zsh
genfstab -U -p /mnt >> /mnt/etc/fstab

:<< \
------------------------------------------------------------------------
Dump remainder into post chroot script
------------------------------------------------------------------------
# extract everything after this section with necessary variables prefixed
head -n3 $0 > /mnt/installer
typeset -p CONFIG INIT INSTALL MKINITCPIO >> /mnt/installer
sed -n "/>\{10\}/,$ p" "$0" >> /mnt/installer
chmod +x /mnt/installer
arch-chroot /mnt /installer; rm /mnt/installer;
#umount -R /mnt/boot; umount -R /mnt; cryptsetup close $CONFIG[crypt_mapped_label]
print "Installation complete. Check boot manager and reboot."
exit

# >>>>>>>>>>>>>>>>>>>>>>>> CHROOT TRIM LINE <<<<<<<<<<<<<<<<<<<<<<<<<<<<

:<< \
------------------------------------------------------------------------
Install Commands
------------------------------------------------------------------------
tmpaur=/tmp/aur
[[ -d $tmpaur ]] && rm -rf $tmpaur; mkdir $tmpaur
() {
    for package
        do
        cd $tmpaur
        curl -O https://aur.archlinux.org/packages/${package:0:2}/${package}/${package}.tar.gz
        tar -xzvf ${package}.tar.gz
        cd $tmpaur/${package}
        makepkg --asroot --syncdeps --install --noconfirm
        cd
        rm -rf $tmpaur/${package}
    done
} aura-bin #cower pacaur
cd
installpkg () {
    for package in ${=*}
    do
        pacman --noconfirm -S $package || su $CONFIG[username] -c "sudo aura --noconfirm -A $package"
    done
}

:<< \
------------------------------------------------------------------------
Locale, Console Font, Timezone, Hostname
------------------------------------------------------------------------
print ${CONFIG[locale]} > /etc/locale.gen && locale-gen
print ${CONFIG[locale][(w)1]} >> /etc/locale.conf
export LANG=${CONFIG[locale][(w)1]}
print "KEYMAP=${CONFIG[keymap]}\nFONT=${CONFIG[font]}" > /etc/vconsole.conf
ln -sf "/usr/share/zoneinfo/${CONFIG[timezone]}" /etc/localtime && hwclock --systohc --utc
print ${CONFIG[hostname]} > /etc/hostname
insert_at=${"${(@A)hosts::="${(@f):-$(</etc/hosts)}"}"[(I)127*]}
hosts[$insert_at]="${hosts[insert_at]} ${CONFIG[hostname]}"
print -l -- "${(@)hosts}" > /etc/hosts

:<< \
------------------------------------------------------------------------
Initial User & sudo
------------------------------------------------------------------------
useradd -m -G wheel -s =zsh $CONFIG[username]
echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /var/tmp/sudoers.wheel
visudo -cf /var/tmp/sudoers.wheel \
    && { mv /var/tmp/sudoers.wheel /etc/sudoers.d/wheel } \
    || { print "ERROR updating sudoers; no change made" }

:<< \
------------------------------------------------------------------------
Initial Ramdisk
------------------------------------------------------------------------
installpkg btrfs-progs
# TODO: rm old initrd files
mv /etc/mkinitcpio.conf /etc/mkinitcpio.conf.orig
print "MODULES=\"${=CONFIG[modules]}\"" > /etc/mkinitcpio.conf
print "HOOKS=\"${=CONFIG[hooks]}\"" >> /etc/mkinitcpio.conf
mkinitcpio -p linux || :

:<< \
------------------------------------------------------------------------
Bootloader & Kernel Command Line
------------------------------------------------------------------------
# TODO:
# if there is no existing /boot/EFI/refind directory, copy the refind
# default directory to /boot/EFI/refind
# if desired theme is missing, install it as well
#
# append a new Archlinu menuentry 
newentry="\n\nmenuentry 'New Arch Linux' {
    icon EFI/refind/next-theme/icons/os_arch.png
    loader vmlinuz-linux
    initrd initramfs-linux.img
    options 'ro rd.luks.crypttab=0 rd.luks.allow-discards rd.luks.uuid=${CONFIG[crypt_uuid]} root=UUID=${CONFIG[root_uuid]} rootflags=subvol=root,rw,x-systemd.device-timeout=0,relatime,compress=lzo,ssd,space_cache,autodefrag,inode_cache i915.modeset=1 quiet vga=current'
    enabled
}"
print "$newentry" >> /boot/EFI/refind/refind.conf

:<< \
------------------------------------------------------------------------
Installers
------------------------------------------------------------------------
for installer in ${(kn)INSTALL}
do
    [[ -n ${install::=${INSTALL[$installer]:-}} ]] && installpkg $install
    [[ -n ${init::=${INIT[${installer##[0-9]##,}]:-}} ]] && eval $init
done

:<< \
------------------------------------------------------------------------
Passwords
------------------------------------------------------------------------
# Query and confirm password changes for root and user account
() {
    for user
    do
        print "Password for account '$user'"
        while ! ${${${pass::=$(read -Ers "?Password: ")}:#$(\
            read -Ers "?$(print "\nConfirmation: ")")}:+false};
        do print "\nDidn't match--try again:\n"; done; print
        print -r $user:$pass | chpasswd
    done
} root $CONFIG[username]


:<< \
------------------------------------------------------------------------
End of chroot section
------------------------------------------------------------------------
# will exit from chroot and perform cleanup


# vim: set filetype=sh :
