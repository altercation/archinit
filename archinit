#!/usr/bin/env zsh
# ----------------------------------------------------------------------
# Storage initialization commmands
# Surface Pro 3 Dual Boot
# ----------------------------------------------------------------------
# curl -LO http://links.ethanschoonover.com/archinit


typeset -A CONFIG INSTALL INIT MKINITCPIO
typeset -a INSTALLERS

CONFIG=(
username    es
shell       zsh
hostname    palimpsest
timezone    America/Los_Angeles
locale      "en_US.UTF-8 UTF-8"
keymap      us
font        Lat2-Terminus16
drive       /dev/sda
swap_part   6
crypt_part  7
boot_label  SYSTEM
dmz_label   DMZ
swap_label  swap
crypt_part_label    cryptpart
crypt_mapped_label  cryptdev
crypt_fs_label      archlinux
modules     "i915"
hooks       "base systemd sd-encrypt sd-vconsole modconf block filesystem btrfs fsck shutdown"
)
#boot_part   2
#dmz_part    5
# (above) base hook still here for emergency shell... need to check on when that gets changed

INSTALL=(

1,utilities     "
                 btrfs-progs
                 gnupg
                 htop
                 openssh
                 powertop
                 python
                 refind-efi
                 vim
                "

2,networking    "
                 dialog
                 iw
                 wpa_supplicant
                 rfkill
                 networkmanager
                 networkmanager-openvpn
                "

3,boot          "
                 plymouth
                "

4,x             "
                 xorg
                 xf86-video-intel
                 xf86-input-wacom
                 libva-intel-driver
                 libvdpau-va-gl
                "

5,dispmgr       "
                 lightdm
                 accountsservice
                 light-locker
                 lightdm-gtk3-greeter
                "

6,freedesktop   "
                 d-feet
                 colord colord-gtk
                 desktop-file-utils
                "

7,wm            "
                 compton
                 dmenu
                 dunst
                 gnome-keyring
                 gnome-keyring-query
                 i3
                 network-manager-applet
                 polkit-gnome
                 rvxt-unicode
                 terminus-font
                 udiskie
                 unclutter
                 volnoti
                "

8,xutils        "
                 argyllcms
                 dispcalgui
                 feh
                 file-roller
                 p7zip
                 parcellite
                 unrar
                 unzip
                 xkeycaps
                 xorg-xfontsel
                 zip
                "

9,xapps         "
                 ttf-bitstream-vera
                 google-chrome-dev
                "

10,sound        "
                 alsa-utils
                 pulseaudio
                 pulseaudio-alsa
                 paprefs
                 pavucontrol
                "
)

INIT=(
sound           'amixer sset Master unmute'
video           'print "export LIBVA_DRIVER_NAME=vdpau\nexport VDPAU_DRIVER=va_gl" > /etc/video_accel.sh'        
)

# purely cosmetic
setfont $CONFIG[font]

:<< \
------------------------------------------------------------------------
Storage configuration
------------------------------------------------------------------------
umount -R /mnt/home/dmz &>/dev/null || :
umount -R /mnt/home &>/dev/null || :
umount -R /mnt/boot &>/dev/null || :
umount -R /mnt &>/dev/null || :
cryptsetup close $CONFIG[crypt_mapped_label] &>/dev/null || :
swapoff -L $CONFIG[swap_label] &>/dev/null || :

# Partitioning (drive contents preserved)
# ----------------------------------------------------------------------
ram="$(( $(print ${$(cat /proc/meminfo | grep -i memtotal)[2]}) / 1000000 ))G"
sgdisk --delete=$CONFIG[swap_part] $CONFIG[drive]
sgdisk --delete=$CONFIG[crypt_part] $CONFIG[drive]
sgdisk --new=$CONFIG[swap_part]:0:+$ram $CONFIG[drive]
sgdisk --largest-new=$CONFIG[crypt_part] $CONFIG[drive]
sgdisk --change-name=$CONFIG[swap_part]:$CONFIG[swap_label] $CONFIG[drive]
sgdisk --change-name=$CONFIG[crypt_part]:$CONFIG[crypt_part_label] $CONFIG[drive]

# Encryption
# ----------------------------------------------------------------------
# Query and confirm passphrase
while ! ${${${pass::=$(read -Ers "?Passphrase: ")}:#$(read -Ers "?Confirmation: ")}:+false};
do print "\nDidn't match--try again:\n"; done
# LUKS formatting & open
print -r $pass | cryptsetup luksFormat $CONFIG[drive]$CONFIG[crypt_part]
print -r $pass | cryptsetup open $CONFIG[drive]$CONFIG[crypt_part] $CONFIG[crypt_mapped_label]
# capture UUIDs for use in kernel command line
CONFIG[crypt_uuid]="$(lsblk -no UUID $CONFIG[drive]$CONFIG[crypt_part])"
CONFIG[root_uuid]="$(lsblk -no UUID /dev/mapper/$CONFIG[crypt_mapped_label])"

# Swap configuration
# ----------------------------------------------------------------------
# Get swap uuid (add --label on swap to use instead)
CONFIG[swap_uuid]="$(lsblk -no UUID /dev/sda$CONFIG[swap_part])" # get swap uuid if no label
# UUID variant of mkswap and swapon: -U $CONFIG[swap,uuid]
mkswap -L $CONFIG[swap_label] $CONFIG[drive]$CONFIG[swap_part] # make swap device
swapon -L $CONFIG[swap_label] $CONFIG[drive]$CONFIG[swap_part] # activate swap device

# Filesystem creation
# ----------------------------------------------------------------------
mkfs.btrfs --label $CONFIG[crypt_fs_label] /dev/mapper/$CONFIG[crypt_mapped_label] # make filesystem

# Subvolume creation
# ----------------------------------------------------------------------
[[ -d /tmp/btrfs ]] && rm -rf /tmp/btrfs; mkdir -p /tmp/btrfs
mount -t btrfs /dev/mapper/$CONFIG[crypt_mapped_label] /tmp/btrfs
btrfs subvolume create /tmp/btrfs/root
btrfs subvolume set-default /tmp/btrfs/root
btrfs subvolume create /tmp/btrfs/home
umount /tmp/btrfs

# Mount filesystems and subvolumes
# ----------------------------------------------------------------------
opts_btrfs=defaults,x-mount.mkdir,compress=lzo,space_cache,autodefrag,inode_cache
opts_fat=defaults,x-mount.mkdir
opts_ntfs=defaults,x-mount.mkdir
mount -t btrfs -o subvol=root,$opts_btrfs /dev/mapper/$CONFIG[crypt_mapped_label] /mnt
mount -o $opts_fat -L $CONFIG[boot_label] /mnt/boot
mount -t btrfs -o subvol=home,$opts_btrfs /dev/mapper/$CONFIG[crypt_mapped_label] /mnt/home
mount -o $opts_ntfs -L $CONFIG[dmz_label] /mnt/home/dmz

:<< \
------------------------------------------------------------------------
Clean up old initramfs files
------------------------------------------------------------------------
rm -f /mnt/boot/*(#q.)

:<< \
------------------------------------------------------------------------
Install base system
------------------------------------------------------------------------
pacstrap /mnt base
pacstrap /mnt base-devel
pacstrap /mnt zsh
genfstab -U -p /mnt >> /mnt/etc/fstab

:<< \
------------------------------------------------------------------------
Dump remainder into post chroot script
------------------------------------------------------------------------
# extract everything after this section with necessary variables prefixed
head -n1 $0 > /mnt/installer
typeset -p CONFIG INIT INSTALL MKINITCPIO >> /mnt/installer
sed -n "/>\{10\}/,$ p" "$0" >> /mnt/installer
chmod +x /mnt/installer
arch-chroot /mnt /installer; rm /mnt/installer;
#umount -R /mnt/boot; umount -R /mnt; cryptsetup close $CONFIG[crypt_mapped_label]
print "Installation complete. Check boot manager and reboot."
exit

# >>>>>>>>>>>>>>>>>>>>>>>> CHROOT TRIM LINE <<<<<<<<<<<<<<<<<<<<<<<<<<<<

:<< \
------------------------------------------------------------------------
Install Commands
------------------------------------------------------------------------
tmpaur=/tmp/aur
[[ -d $tmpaur ]] && rm -rf $tmpaur; mkdir $tmpaur
() {
    for package
        do
        cd $tmpaur
        curl -O https://aur.archlinux.org/packages/${package:0:2}/${package}/${package}.tar.gz
        tar -xzvf ${package}.tar.gz
        cd $tmpaur/${package}
        makepkg --asroot --syncdeps --install --noconfirm
    done
} cower pacaur
cd
installpkg () {
    for package in ${=*}
    do
        if pacman -Qs $package &>/dev/null
        then
            pacman --noconfirm -S $package
        else
            su $CONFIG[username] -c "pacaur --noconfirm --noedit -S $package"
        fi
    done
}

:<< \
------------------------------------------------------------------------
Locale, Console Font, Timezone, Hostname
------------------------------------------------------------------------
print ${CONFIG[locale]} > /etc/locale.gen && locale-gen
print ${CONFIG[locale][(w)1]} >> /etc/locale.conf
export LANG=${CONFIG[locale][(w)1]}
print "KEYMAP=${CONFIG[keymap]}\nFONT=${CONFIG[font]}" > /etc/vconsole.conf
ln -s "/usr/share/zoneinfo/${CONFIG[timezone]}" /etc/localtime && hwclock --systohc --utc
print ${CONFIG[hostname]} > /etc/hostname
insert_at=${"${(@A)hosts::="${(@f):-$(</etc/hosts)}"}"[(I)127*]}
hosts[$insert_at]="${hosts[insert_at]} ${CONFIG[hostname]}"
print -l -- "${(@)hosts}" > /etc/hosts

:<< \
------------------------------------------------------------------------
Initial User
------------------------------------------------------------------------
useradd -m -G wheel -s =zsh $CONFIG[username]

:<< \
------------------------------------------------------------------------
Installers
------------------------------------------------------------------------
for installer in ${(kn)INSTALL}
do
    [[ -n ${install::=${INSTALL[$installer]:-}} ]] && installpkg $install
    [[ -n ${init::=${INIT[${installer##[0-9]##,}]:-}} ]] && eval $init
done

:<< \
------------------------------------------------------------------------
Initial Ramdisk
------------------------------------------------------------------------
# TODO: rm old initrd files
mv /etc/mkinitcpio.conf /etc/mkinitcpio.conf.orig
print "MODULES=\"${=CONFIG[modules]}\"" > /etc/mkinitcpio.conf
print "HOOKS=\"${=CONFIG[hooks]}\"" > /etc/mkinitcpio.conf
mkinitcpio -p linux

:<< \
------------------------------------------------------------------------
Passwords
------------------------------------------------------------------------
# Query and confirm password changes for root and user account
() {
    for user
    do
        print "Password for account '$user'"
        while ! ${${${pass::=$(read -Ers "?Password: ")}:#$(read -Ers "?Confirmation: ")}:+false};
        do print "\nDidn't match--try again:\n"; done
        print -r $user:$pass | chpasswd
    done
} root $CONFIG[username]
echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /var/tmp/sudoers.wheel
visudo -cf /var/tmp/sudoers.wheel \
    && { mv /var/tmp/sudoers.wheel /etc/sudoers.d/wheel } \
    || { print "ERROR updating sudoers; no change made" }

:<< \
------------------------------------------------------------------------
Bootloader & Kernel Command Line
------------------------------------------------------------------------
# TODO:
# if there is no existing /boot/EFI/refind directory, copy the refind
# default directory to /boot/EFI/refind
# if desired theme is missing, install it as well
#
# append a new Archlinu menuentry 
newentry="\n\nmenuentry 'New Arch Linux' {
    icon EFI/refind/next-theme/icons/os_arch.png
    loader vmlinuz-linux
    initrd initramfs-linux.img
    options 'ro rd.luks.crypttab=0 rd.luks.allow-discards rd.luks.uuid=${CONFIG[crypt_uuid]} root=UUID=${CONFIG[root_uuid]} rootflags=subvol=root,rw,x-systemd.device-timeout=0,relatime,compress=lzo,ssd,space_cache,autodefrag,inode_cache i915.modeset=1 quiet vga=current'
    enabled
}"

print "$newentry" >> /mnt/boot/EFI/refind/refind.conf

:<< \
------------------------------------------------------------------------
End of chroot section
------------------------------------------------------------------------
# will exit from chroot and perform cleanup


# vim: set filetype=sh :
